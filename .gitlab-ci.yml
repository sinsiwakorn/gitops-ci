stages:
  - build
  - test
  - deploy

variables:
  HEROKU_REGISTRY_URL: registry.heroku.com

Building Dev:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  variables:
    HEROKU_REGISTRY_IMAGE_WEB: ${HEROKU_REGISTRY_URL}/${HEROKU_APP_NAME}/web
    HEROKU_REGISTRY_IMAGE_WORKER: ${HEROKU_REGISTRY_URL}/${HEROKU_APP_NAME}/worker
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$HEROKU_REGISTRY_URL\":{\"username\":\"$HEROKU_USER_EMAIL\",\"password\":\"$HEROKU_API_KEY\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile.staging --destination $HEROKU_REGISTRY_IMAGE_WEB --cleanup
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile.worker.staging --destination $HEROKU_REGISTRY_IMAGE_WORKER --cleanup
  environment:
    name: staging
  only:
    - staging

Testing:
  stage: test
  image: python:3.8-slim
  services: 
    - postgres:latest
  variables:
    POSTGRES_DB: postgres
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
  script:
    - export DATABASE_URL=postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres:5432/$POSTGRES_DB
    - export SSL_REQUIRE=0
    - apt-get update
    - apt-get install python3-pip musl-dev -qy --fix-missing
    - pip3 install -r requirements.txt
    - coverage run manage.py test
    - coverage report -m
    - coverage xml -o coverage-reports/coverage-be-docser.xml
    - flake8 . --max-line-length=100
    - black . --check
    - isort . --check
  artifacts:
    name: "[$CI_JOB_NAME]$COMMIT_REF_NAME"
    paths:
      - coverage-reports/coverage-be-docser.xml
    when: on_success

Staging:
  stage: deploy
  image: ruby:latest
  before_script:
    - wget -qO- https://cli-assets.heroku.com/install-ubuntu.sh | sh
  script:
    - heroku container:release web worker --app $HEROKU_APP_NAME
  environment:
    name: staging
    url: $HEROKU_APP_HOST
  only:
    - staging